@using Client.ApplicationStates
@implements IDisposable
@inject AllState allState
@if (allState.ShowEmployee)
{
    @if (ShowMainPage)
    {
        <div class="container-fuid mt-5">
            <div class="row">
                <div class="col-lg-12">
                    <div class="card">
                        <div class="card-header">
                            <button class="btn btn-outline-success" @onclick="ShowAddOrUpdateEmployeeButtonClicked">
                                <i class="bi bi-plus-circle-dotted"></i>Add Employee
                            </button>
                        </div>
                            <div class="card-body">
                            @{
                                var Tool = (new List<string>() { "Search", "ExcelExport", "PdfExport", "Print" });
                            }
                                <SfGrid DataSource="@Employees"
                                    AllowPaging="true"
                                    AllowSorting="true"
                                    Toolbar=@Tool
                                    AllowExcelExport="true"
                                    @ref="DefaultGrid"
                                    AllowPdfExport="true">
                                    <GridColumns>
                                        <GridColumn HeaderText="Employee Image">
                                            <Template>
                                            @{
                                                var employee = (context as Employee);
                                                <div class="image">
                                                    <img src="@employee!.Photo" alt="@employee.Name" width="150" height="150"/>
                                                </div>
                                            }
                                            </Template>
                                        </GridColumn>
                                        <GridColumn Field=@nameof(Employee.CivilId) HeaderText="Civil ID"></GridColumn>
                                        <GridColumn Field=@nameof(Employee.FileNumber) HeaderText="File Number"></GridColumn>
                                        <GridColumn Field=@nameof(Employee.Name) HeaderText="Name"></GridColumn>
                                        <GridColumn Field=@nameof(Employee.TelephoneNumber) HeaderText="Telephone"></GridColumn>
                                        <GridColumn Field=@nameof(Employee.JobName) HeaderText="Job Name"></GridColumn>
                                        <GridColumn Field=@nameof(Employee.Branch.Name) HeaderText="Branch"></GridColumn>
                                        <GridColumn Field=@nameof(Employee.Town.Name) HeaderText="Town"></GridColumn>
                                        <GridColumn HeaderText="Menu" HeaderTextAlign="TextAlign.Left">
                                            <Template>
                                            @{
                                                var employee = (context as Employee);
                                                <i class="bi bi-menu-down text-primary" id="cursorStyle" @onclick="()=>ShowMenuPopUp(employee!)"></i>
                                            }
                                            </Template>
                                        </GridColumn>
                                    </GridColumns>
                                </SfGrid>
                            </div>
                            <div class="card-footer">
                            </div>
                    </div>
                </div>
            </div>
        </div>
    }    
}
<AddOrUpdateEmployeePage @ref="addOrUpdateEmployeePage"
                        ShowAddOrUpdateEmployee="ShowAddOrUpdatePage"
                        Employee="Employee"
                        NotifyParentFormCloseClicked="NotifyParentFormCloseClicked"
                        Countries="DefaultCountries"
                        Cities="SelectedCities"
                        Towns="SelectedTowns"
                        GeneralDepartments="DefaultGeneralDepartments"
                         Departments="SelectedDepartments"
                         Branches="SelectedBranches"
                         HandleCountrySelectedEvent="HandleCountrySelectedEvent"
                         HandleCitySelectedEvent="HandleCitySelectedEvent"
                         HandleGeneralDepartmentSelectedEvent="HandleGeneralDepartmentSelectedEvent"
                         HandleDepartmentSelectedEvent="HandleDepartmentSelectedEvent"
                         HandleSaveEmployeeClickedEvent="HandleSaveEmployeeClickedEvent" />
<EmployeeDetailPage 
    EmployeeDetails="Employee"
    ShowDetailsPage="ShowDetailsPage"
                    HandleDetailsPageCloseBtnClicked="HandleDetailsPageCloseBtnClicked" />

<ContextMenu @ref="contextMenu"
   HandleDeleteClicked="DeleteClicked"
             HandleEditClicked="EditClicked" 
             HandleViewClicked="ViewClicked"
             HandleAddVacationClicked="AddVacationClicked"
             HandleAddOvertimeClicked="AddOvertimeClicked"
             HandleAddSanctionClicked="AddSanctionClicked"
             HandleAddHealthClicked="AddHealthClicked" />

<DoctorDialog @ref="doctorDialog"
    Doctor="Doctor"
HandleSaveOperationEvent="SaveHealthEvent" />

<OvertimeDialog @ref="overtimeDialog"
                OvertimeTypes="OvertimeTypes"
ItemModel="Overtime"
HandleSaveOperationEvent="SaveOvertimeEvent"></OvertimeDialog>

<SanctionDialog @ref="sanctionDialog"
                ItemModel="Sanction"
                SanctionTypes="SanctionTypes"
                HandleSaveOperationEvent="SaveSanctionEvent" />

<VacationDialog @ref="vacationDialog"
    ItemModel="Vacation"
                VacationTypes="VacationTypes"
                HandleSaveOperationEvent="SaveVacationEvent"/>
@code {
    AddOrUpdateEmployeePage? addOrUpdateEmployeePage;
    public List<Employee> Employees { get; set; } = new();
    public Employee Employee { get; set; } = new();

    public List<Country> DefaultCountries { get; set; } = [];
    public List<City> DefaultCities { get; set; } = [];
    public List<Town> DefaultTowns { get; set; } = [];

    public List<GeneralDepartment> DefaultGeneralDepartments { get; set; } = [];
    public List<Department> DefaultDepartments { get; set; } = [];
    public List<Branch> DefaultBranches { get; set; } = [];

    public List<City> SelectedCities { get; set; } = [];
    public List<Town> SelectedTowns { get; set; } = [];
    public List<Department> SelectedDepartments { get; set; } = [];
    public List<Branch> SelectedBranches { get; set; } = [];

    protected async override Task OnInitializedAsync()
    {
        allState.Action += StateHasChanged;
        await LoadEmployees();
        await LoadDefaults();
        await GetOvertimeTypes();
        await GetSanctionTypes();
        await GetVacationTypes();
    }

    private async Task LoadDefaults()
    {
        DefaultCountries = await countryService.GetAll(Constants.CountryBaseUrl);
        DefaultCities = await cityService.GetAll(Constants.CityBaseUrl);
        DefaultTowns = await townService.GetAll(Constants.TownBaseUrl);

        DefaultGeneralDepartments = await generalDepartmentService.GetAll(Constants.GeneralDepartmentBaseUrl);
        DefaultDepartments = await departmentService.GetAll(Constants.DepartmentBaseUrl);
        DefaultBranches = await branchService.GetAll(Constants.BranchBaseUrl);
    }

    void HandleCountrySelectedEvent(int countryId) 
    => SelectedCities = DefaultCities.Where(x => x.CountryId == countryId).ToList();

    void HandleCitySelectedEvent(int cityId) 
    => SelectedTowns = DefaultTowns.Where(x => x.CityId == cityId).ToList();

    void HandleGeneralDepartmentSelectedEvent(int generalDepartmentId)
    => SelectedDepartments = DefaultDepartments.Where(x => x.GeneralDepartmentId == generalDepartmentId).ToList();

    void HandleDepartmentSelectedEvent(int departmentId) 
    => SelectedBranches = DefaultBranches.Where(x => x.DepartmentId == departmentId).ToList();

    //Save Employee
    async Task HandleSaveEmployeeClickedEvent(Employee employee)
    {
        bool successCheck = false;
        if(employee.Id > 0)
        {
            var res = await employeeService.Update(employee, Constants.EmployeeBaseUrl);
            successCheck = await DisplayMessage(res.Flag, res.Message);
        }
        else
        {
            var response = await employeeService.Insert(employee, Constants.EmployeeBaseUrl);
            successCheck = await DisplayMessage(response.Flag, response.Message);
        }
        if (successCheck)
        {
            await addOrUpdateEmployeePage!.ClearContent();
        }
    }

    private async Task<bool> DisplayMessage(bool flag, string message)
    {
        if (flag)
        {
            await dialogService.AlertAsync(message, "Success Operation");
            return true;
        }
        else
        {
            await dialogService.AlertAsync(message, "Alert!");
            return false;
        }
    }

    // Notify parent when AddOrUpdateEmployee Form closes
    private async Task NotifyParentFormCloseClicked()
    {
        ShowMainPage = true;
        ShowAddOrUpdatePage = false;
        await LoadEmployees();
        SelectedEmployee = new();
    }

    private async Task LoadEmployees()
    {
        Employees = await employeeService.GetAll(Constants.EmployeeBaseUrl);
    }

    public bool ShowMainPage { get; set; } = true;
    public bool ShowAddOrUpdatePage { get; set; } = false;
    void ShowAddOrUpdateEmployeeButtonClicked()
    {
        Employee = new();
        ShowMainPage = false;
        ShowAddOrUpdatePage = true;
    }

    //Context menu
    //Show Menu Pop Up
    ContextMenu? contextMenu;
    public Employee SelectedEmployee { get; set; } = new();
    void ShowMenuPopUp(Employee emp)
    {
        SelectedEmployee = emp;
        contextMenu!.OpenContextMenu();
    }

    //Edit clicked
    void EditClicked()
    {
        addOrUpdateEmployeePage!.Employee.Id = SelectedEmployee.Id;
        addOrUpdateEmployeePage!.EmployeeGroup1.Name = SelectedEmployee.Name;
        addOrUpdateEmployeePage!.EmployeeGroup1.TelephoneNumber = SelectedEmployee.TelephoneNumber;
        addOrUpdateEmployeePage!.EmployeeGroup1.FileNumber = SelectedEmployee.FileNumber;
        addOrUpdateEmployeePage!.EmployeeGroup1.Address = SelectedEmployee.Address;
        addOrUpdateEmployeePage!.EmployeeGroup1.Photo = SelectedEmployee.Photo;
        addOrUpdateEmployeePage!.EmployeeGroup1.CivilId = SelectedEmployee.CivilId;

        addOrUpdateEmployeePage!.EmployeeGroup2.JobName = SelectedEmployee.JobName;
        addOrUpdateEmployeePage!.EmployeeGroup2.Other = SelectedEmployee.Other;

        addOrUpdateEmployeePage!.GeneralDepartment = SelectedEmployee.Branch!.Department!.GeneralDepartment!.Name;
        addOrUpdateEmployeePage!.Department = SelectedEmployee.Branch!.Department!.Name;
        addOrUpdateEmployeePage!.Branch = SelectedEmployee.Branch!.Name;

        addOrUpdateEmployeePage!.Country = SelectedEmployee.Town!.City!.Country!.Name;
        addOrUpdateEmployeePage!.City = SelectedEmployee.Town!.City!.Name;
        addOrUpdateEmployeePage!.Town = SelectedEmployee.Town!.Name;

        addOrUpdateEmployeePage.Title = "Update";
        SelectedEmployee = new();
        contextMenu!.CloseContextMenu();
        ShowAddOrUpdatePage = true;
        ShowMainPage = false;
    }

    private async Task DeleteClicked()
    {
        contextMenu!.CloseContextMenu();
        bool confirm = await dialogService.ConfirmAsync($"Are you sure wanna delete {SelectedEmployee.Name}?", "Confirm Delete");
        if (!confirm) return;

        var response = await branchService.DeleteById(SelectedEmployee.Id, Constants.EmployeeBaseUrl);
        if (await DisplayMessage(response.Flag, response.Message))
        {
            SelectedEmployee = new();
            await LoadEmployees();
        }
    }

    public bool ShowDetailsPage { get; set; } = false;
    private void ViewClicked()
    {
        Employee = SelectedEmployee;
        contextMenu!.CloseContextMenu();
        ShowDetailsPage = true;
        ShowMainPage = false;
        SelectedEmployee = new();
    }

    DoctorDialog? doctorDialog;
    Doctor Doctor = new();
    private void AddHealthClicked()
    {
        Doctor.EmployeeId = SelectedEmployee.Id;
        contextMenu!.CloseContextMenu();
        doctorDialog!.OpenDialog();
    }

    async Task SaveHealthEvent(Doctor item)
    {
        item.EmployeeId = SelectedEmployee.Id;
        var (flag, message) = await doctorService.Insert(item, Constants.DoctorBaseUrl);
        var response = await DisplayMessage(flag, message);
        if (response)
        {
            SelectedEmployee = new();
            Doctor = new();
            doctorDialog!.CloseDialog();
        }
    }

    OvertimeDialog? overtimeDialog;
    Overtime Overtime = new();
    List<OvertimeType> OvertimeTypes = [];
    private void AddOvertimeClicked()
    {
        Overtime.EmployeeId = SelectedEmployee.Id;
        contextMenu!.CloseContextMenu();
        overtimeDialog!.OpenDialog();
    }

    async Task SaveOvertimeEvent(Overtime item)
    {
        item.EmployeeId = SelectedEmployee.Id;
        var (flag, message) = await overtimeService.Insert(item, Constants.OvertimeBaseUrl);
        var response = await DisplayMessage(flag, message);
        if (response)
        {
            SelectedEmployee = new();
            Overtime = new();
            overtimeDialog!.CloseDialog();
        }
    }

    SanctionDialog? sanctionDialog;
    Sanction Sanction = new();
    List<SanctionType> SanctionTypes = [];
    private void AddSanctionClicked()
    {
        Sanction.EmployeeId = SelectedEmployee.Id;
        contextMenu!.CloseContextMenu();
        sanctionDialog!.OpenDialog();
    }

    async Task SaveSanctionEvent(Sanction item)
    {
        item.EmployeeId = SelectedEmployee.Id;
        var (flag, message) = await sanctionService.Insert(item, Constants.SanctionBaseUrl);
        var response = await DisplayMessage(flag, message);
        if (response)
        {
            SelectedEmployee = new();
            Sanction = new();
            sanctionDialog!.CloseDialog();
        }
    }

    VacationDialog? vacationDialog;
    Vacation Vacation = new();
    List<VacationType> VacationTypes = [];
    private void AddVacationClicked()
    {
        Vacation.EmployeeId = SelectedEmployee.Id;
        contextMenu!.CloseContextMenu();
        vacationDialog!.OpenDialog();
    }

    async Task SaveVacationEvent(Vacation item)
    {
        item.EmployeeId = SelectedEmployee.Id;
        var (flag, message) = await vacationService.Insert(item, Constants.VacationBaseUrl);
        var response = await DisplayMessage(flag, message);
        if (response)
        {
            SelectedEmployee = new();
            Vacation = new();
            vacationDialog!.CloseDialog();
        }
    }

    private async Task GetOvertimeTypes() => OvertimeTypes = await otService.GetAll(Constants.OvertimeTypeBaseUrl);
    private async Task GetVacationTypes() => VacationTypes = await vtService.GetAll(Constants.VacationTypeBaseUrl);
    private async Task GetSanctionTypes() => SanctionTypes = await stService.GetAll(Constants.SanctionTypeBaseUrl);

    void HandleDetailsPageCloseBtnClicked()
    {
        ShowDetailsPage = false;
        ShowMainPage = true;
    }

    public void Dispose() => allState.Action -= StateHasChanged;

    // Excel / PDF export
    SfGrid<Employee>? DefaultGrid;
    public async Task ToolbarClickedHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Text == "Excel Export")
            await this.DefaultGrid!.ExportToExcelAsync();
        if (args.Item.Text == "PDF Export")
            await this.DefaultGrid!.ExportToPdfAsync();
    }
}
